generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                  Int      @id @default(autoincrement())
  name                String
  email               String   @unique
  password_hash       String?
  google_id           String?  @unique
  profile_picture_url String?
  role                Role     @default(user)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  recipes Recipe[] // <-- AÑADIDO: Relación inversa para acceder a las recetas del usuario

  @@map("users")
}

enum RecipeType {
  breakfast
  lunch
  dinner
}

enum RecipeVisibility {
  public
  private
}

model Recipe {
  id                       Int              @id @default(autoincrement())
  user_id                  Int
  user                     User             @relation(fields: [user_id], references: [id]) // <-- MEJORADO: Referencia de objeto completa
  name                     String
  description              String           @db.Text // <-- AÑADIDO: Tipo explícito para textos largos
  image_url                String
  preparation_time_minutes Int
  type                     RecipeType
  visibility               RecipeVisibility @default(private)
  instructions             Json // <-- CORREGIDO: Typo
  createdAt                DateTime         @default(now()) @map("created_at")
  updatedAt                DateTime         @updatedAt @map("updated_at")

  media       RecipeMedia[]      // <-- AÑADIDO: Relación inversa
  ingredients RecipeIngredient[] // <-- AÑADIDO: Relación inversa

  @@map("recipes")
}

enum RecipeMediaType {
  image
  video
}

model RecipeMedia {
  id            Int                 @id @default(autoincrement())
  recipe_id     Int
  recipe        Recipe              @relation(fields: [recipe_id], references: [id]) // <-- MEJORADO: Referencia de objeto completa
  url           String
  media_type    RecipeMediaType
  display_order Int
  createdAt     DateTime            @default(now()) @map("created_at")

  @@map("recipe_media")
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  recipes RecipeIngredient[] // <-- AÑADIDO: Relación inversa

  @@map("ingredients")
}

model RecipeIngredient {
  id              Int      @id @default(autoincrement())
  recipe_id       Int
  recipe          Recipe   @relation(fields: [recipe_id], references: [id]) // <-- MEJORADO: Referencia de objeto completa
  ingredient_id   Int
  ingredient      Ingredient @relation(fields: [ingredient_id], references: [id]) // <-- MEJORADO: Referencia de objeto completa
  quantity        Decimal? @db.Decimal(10,2)
  unit_of_measure String
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("recipe_ingredients")
  @@unique([recipe_id, ingredient_id]) // <-- AÑADIDO: Previene ingredientes duplicados en la misma receta
}